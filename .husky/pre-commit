#!/bin/sh
. "$(dirname "$0")/_/husky.sh"
protected_branch='develop'
current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
RED='\033[0;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
LC_ALL=C
# Select files to format
FILES=$(git diff --cached --name-only --diff-filter=ACM "*.cs" | sed 's| |\\ |g')
[ -z "$FILES" ] && exit 0
# Format all selected files
echo "$FILES" | cat | xargs | sed -e 's/ /,/g' | xargs dotnet format --include --files
# Add back the modified files to staging
echo "$FILES" | xargs git add

echo "${YELLOW}Running pre push to master check...${NC}"

echo "${YELLOW}Trying to build tests project...${NC}"

#Let's speed things up a little bit
#DOTNET_CLI_TELEMETRY_OPTOUT=1
#DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1

# build the project
dotnet build
# $? is a shell variable which stores the return code from what we just ran
rc=$?
if [[ $rc != 0 ]]; then
  echo "${RED}Failed to build the project, please fix this and push again${NC}"
  echo ""
  exit $rc
fi

# navigate to the test project to run the tests
# TODO: change this to your test project directory
#    cd test

echo "${YELLOW}Running unit tests...${NC}"
echo ""

# run the unit tests
dotnet test /p:CollectCoverage=true /p:Threshold=80 /p:ThresholdType=line
rc=$?
if [[ $rc != 0 ]]; then
  # A non-zero return code means an error occurred, so tell the user and exit
  echo "${RED}Unit tests failed, please fix and push again${NC}"
  echo ""
  exit $rc
fi